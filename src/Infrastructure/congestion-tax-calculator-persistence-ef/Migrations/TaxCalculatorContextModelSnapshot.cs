// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using congestion;

#nullable disable

namespace congestiontaxcalculatorpersistenceef.Migrations
{
    [DbContext(typeof(TaxCalculatorContext))]
    partial class TaxCalculatorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("congestion_tax_calculator_domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.ExceptVehiclePerCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ExceptVehiclePerCities");
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.ExtensiveRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TaxFreeAfterOnePassInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("TaxFreeDaysAfterHolidayNumber")
                        .HasColumnType("int");

                    b.Property<int>("TaxFreeDaysBeforeHolidayNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("ExtensiveRules");
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.HolidayDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HolidayDateTime")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("HolidayDates");
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.HolidayMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("HolidayMonths");
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.TaxFreeDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxFreeDays");
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.TimeTaxInCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("FinishedTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TimeTaxInCities");
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.ExceptVehiclePerCity", b =>
                {
                    b.HasOne("congestion_tax_calculator_domain.City", null)
                        .WithMany("ExceptVehiclePerCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("congestion_tax_calculator_domain.Vehicle", null)
                        .WithMany("ExceptVehiclePerCities")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.ExtensiveRule", b =>
                {
                    b.HasOne("congestion_tax_calculator_domain.City", null)
                        .WithOne("ExtensiveRule")
                        .HasForeignKey("congestion_tax_calculator_domain.ExtensiveRule", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.HolidayDate", b =>
                {
                    b.HasOne("congestion_tax_calculator_domain.City", null)
                        .WithMany("HolidayDates")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.HolidayMonth", b =>
                {
                    b.HasOne("congestion_tax_calculator_domain.City", null)
                        .WithMany("HolidayMonths")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.TaxFreeDay", b =>
                {
                    b.HasOne("congestion_tax_calculator_domain.City", null)
                        .WithMany("TaxFreeDays")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.TimeTaxInCity", b =>
                {
                    b.HasOne("congestion_tax_calculator_domain.City", null)
                        .WithMany("TimeTaxInCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.City", b =>
                {
                    b.Navigation("ExceptVehiclePerCities");

                    b.Navigation("ExtensiveRule")
                        .IsRequired();

                    b.Navigation("HolidayDates");

                    b.Navigation("HolidayMonths");

                    b.Navigation("TaxFreeDays");

                    b.Navigation("TimeTaxInCities");
                });

            modelBuilder.Entity("congestion_tax_calculator_domain.Vehicle", b =>
                {
                    b.Navigation("ExceptVehiclePerCities");
                });
#pragma warning restore 612, 618
        }
    }
}
